{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from PIL import Image\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# outline\n",
    "\n",
    "\n",
    "## features:\n",
    "1. sharpe ratio\n",
    "2. volume\n",
    "3. hurst_exponent\n",
    "4. open\n",
    "5. close\n",
    "6. high\n",
    "6. low\n",
    "\n",
    "\n",
    "## label:\n",
    "1. 100% mean reversion, 0% momentum\n",
    "2. 75% mean reversion, 25% momentum\n",
    "3. 50% mean reversion, 50% momentum\n",
    "4. 25% mean reversion, 75% momentum\n",
    "5. 0% mean reversion, 100% momentum\n",
    "\n",
    "\n",
    "## approach:\n",
    "### feature generation: \n",
    "for each day (i), compute the features mentioned above\n",
    "\n",
    "### label generation: \n",
    "for each day (i), apply two strategies according to the weights given by the label. \n",
    "\n",
    "choose the weight which gives the best pnl over the next 20 days (i+1:i+20)\n",
    "\n",
    "### training:\n",
    "use every 20 days' (i-10: i) indicator to train to predict the label at (i) \n",
    "\n",
    "\n",
    "### outcome\n",
    "we will have a daily prediction of best portfolio according to data in the past 20 days.\n",
    "\n",
    "We then use majority vote for the past 10 days to decide which strategy to use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Load data\n",
    "df = pd.read_csv(\"/Users/jingang/Desktop/Capstone/SPY.csv\")\n",
    "df.Date = pd.to_datetime(df.Date)\n",
    "df = df.set_index(\"Date\")\n",
    "Price = df.loc[:,\"Adj Close\"]\n",
    "Price=Price.loc[(Price.index>\"1980-01-01\") & (Price.index<\"2018-01-01\")]\n",
    "Volume = df.loc[:,\"Volume\"]\n",
    "Price.head()\n",
    "Open = df.loc[:,\"Open\"]\n",
    "Open=Open.loc[(Open.index>\"1980-01-01\") & (Open.index<\"2018-01-01\")]\n",
    "High = df.loc[:,\"High\"]\n",
    "High=High.loc[(High.index>\"1980-01-01\") & (High.index<\"2018-01-01\")]\n",
    "Low = df.loc[:,\"Low\"]\n",
    "Low=Low.loc[(Low.index>\"1980-01-01\") & (Low.index<\"2018-01-01\")]\n",
    "Close = df.loc[:,\"Close\"]\n",
    "Close=Close.loc[(Close.index>\"1980-01-01\") & (Close.index<\"2018-01-01\")]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# generate features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## functions to generate features\n",
    "1. sharpe ratio\n",
    "2. volume\n",
    "3. hurst_exponent\n",
    "4. open\n",
    "5. close\n",
    "6. high\n",
    "6. low"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def compute_sharpe(arr):\n",
    "    ret = np.divide(np.diff(arr),arr[:-1])\n",
    "    return(np.mean(ret)/np.std(ret)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def compute_range(arr):\n",
    "    ret = np.divide(np.diff(arr),arr[:-1])\n",
    "    return max(ret) - min(ret)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def compute_interquartile(arr):\n",
    "    ret = np.divide(np.diff(arr),arr[:-1])\n",
    "    return np.percentile(ret,75)-np.percentile(ret,25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def compute_vol(arr):\n",
    "    log_arr = np.log(arr)\n",
    "    return_arr = np.diff(log_arr)\n",
    "    vol = np.float(np.sqrt(np.cov(return_arr)))\n",
    "    return vol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def compute_hurst_exponent(arr):\n",
    "    num_lag = 18\n",
    "    lag_arr = np.arange(2,2+num_lag)\n",
    "    tau_arr = np.zeros(num_lag)\n",
    "    #  Step through the different lags\n",
    "    for i in range(num_lag):\n",
    "        lag = lag_arr[i]\n",
    "        #  produce price difference with lag\n",
    "        arr_diff = np.diff(arr,lag)\n",
    "        #  Calculate the variance of the differnce vector\n",
    "        tau_arr[i] = np.sqrt(np.std(arr_diff))\n",
    "    #  linear fit to double-log graph (gives power)\n",
    "    m = np.polyfit(np.log10(lag_arr),np.log10(tau_arr),1)\n",
    "    # calculate hurst\n",
    "    hurst = m[0]*2\n",
    "    return hurst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def compute_long_short_scale_vol_ratio(arr, long_scale ,short_scale=1):\n",
    "    arr_long_scale = arr[::long_scale]\n",
    "    arr_short_scale = arr[::short_scale]\n",
    "    \n",
    "    return compute_vol(arr_short_scale)/compute_vol(arr_long_scale)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def compute_autocorr(arr, lag):\n",
    "    log_arr = np.log(arr)\n",
    "    return_arr = np.diff(log_arr)\n",
    "    mat_autocov = np.cov(return_arr[lag:],return_arr[:-lag])\n",
    "    autocorr = mat_autocov[1,0]/np.sqrt(mat_autocov[0,0]*mat_autocov[1,1])\n",
    "    return autocorr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# create the indicator\n",
    "window_indicators = 30\n",
    "Indicators = pd.DataFrame(index = Price.index, columns=[\"hurst_exponent\",\n",
    "                                                        \"sharpe_ratio\",\n",
    "                                                        \"Volume\",\n",
    "                                                        'Open_pct',\n",
    "                                                        'Close_pct',\n",
    "                                                       'High_pct',\n",
    "                                                       'Low_pct',\n",
    "                                                       'Open',\n",
    "                                                       'Price',\n",
    "                                                       'Close'])\n",
    "Indicators.loc[:,\"hurst_exponent\"] = Price.rolling(window=window_indicators).apply(compute_hurst_exponent)\n",
    "Indicators.loc[:,\"sharpe_ratio\"] = Price.rolling(window=window_indicators).apply(compute_sharpe)\n",
    "Indicators.loc[:,\"Volume\"] = Volume.pct_change()\n",
    "Indicators.loc[:,\"Low_pct\"] = Low.pct_change()\n",
    "Indicators.loc[:,\"High_pct\"] = High.pct_change()\n",
    "Indicators.loc[:,\"Close_pct\"] = Close.pct_change()\n",
    "Indicators.loc[:,\"Open_pct\"] = Open.pct_change()\n",
    "Indicators.loc[:,\"Open\"] = Open\n",
    "Indicators.loc[:,\"Price\"] = Price\n",
    "Indicators.loc[:,\"Close\"] = Close"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hurst_exponent</th>\n",
       "      <th>sharpe_ratio</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open_pct</th>\n",
       "      <th>Close_pct</th>\n",
       "      <th>High_pct</th>\n",
       "      <th>Low_pct</th>\n",
       "      <th>Open</th>\n",
       "      <th>Price</th>\n",
       "      <th>Close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-02-15</th>\n",
       "      <td>5.258879</td>\n",
       "      <td>0.027300</td>\n",
       "      <td>0.298928</td>\n",
       "      <td>-0.003800</td>\n",
       "      <td>0.011313</td>\n",
       "      <td>0.010284</td>\n",
       "      <td>-0.003729</td>\n",
       "      <td>139.2500</td>\n",
       "      <td>100.695770</td>\n",
       "      <td>141.078094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-16</th>\n",
       "      <td>5.287110</td>\n",
       "      <td>-0.005176</td>\n",
       "      <td>-0.201556</td>\n",
       "      <td>0.008079</td>\n",
       "      <td>-0.014730</td>\n",
       "      <td>-0.001991</td>\n",
       "      <td>0.007257</td>\n",
       "      <td>140.3750</td>\n",
       "      <td>99.212517</td>\n",
       "      <td>139.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-17</th>\n",
       "      <td>5.338493</td>\n",
       "      <td>0.016244</td>\n",
       "      <td>-0.142583</td>\n",
       "      <td>0.000445</td>\n",
       "      <td>-0.005171</td>\n",
       "      <td>-0.003548</td>\n",
       "      <td>-0.004165</td>\n",
       "      <td>140.4375</td>\n",
       "      <td>98.699432</td>\n",
       "      <td>138.281204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-18</th>\n",
       "      <td>5.341500</td>\n",
       "      <td>-0.174040</td>\n",
       "      <td>0.240632</td>\n",
       "      <td>-0.011126</td>\n",
       "      <td>-0.021469</td>\n",
       "      <td>-0.011126</td>\n",
       "      <td>-0.026000</td>\n",
       "      <td>138.8750</td>\n",
       "      <td>96.580505</td>\n",
       "      <td>135.312500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-22</th>\n",
       "      <td>5.318577</td>\n",
       "      <td>-0.189204</td>\n",
       "      <td>0.744612</td>\n",
       "      <td>-0.026553</td>\n",
       "      <td>-0.002541</td>\n",
       "      <td>-0.018227</td>\n",
       "      <td>-0.008125</td>\n",
       "      <td>135.1875</td>\n",
       "      <td>96.335106</td>\n",
       "      <td>134.968704</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            hurst_exponent  sharpe_ratio    Volume  Open_pct  Close_pct  \\\n",
       "Date                                                                      \n",
       "2000-02-15        5.258879      0.027300  0.298928 -0.003800   0.011313   \n",
       "2000-02-16        5.287110     -0.005176 -0.201556  0.008079  -0.014730   \n",
       "2000-02-17        5.338493      0.016244 -0.142583  0.000445  -0.005171   \n",
       "2000-02-18        5.341500     -0.174040  0.240632 -0.011126  -0.021469   \n",
       "2000-02-22        5.318577     -0.189204  0.744612 -0.026553  -0.002541   \n",
       "\n",
       "            High_pct   Low_pct      Open       Price       Close  \n",
       "Date                                                              \n",
       "2000-02-15  0.010284 -0.003729  139.2500  100.695770  141.078094  \n",
       "2000-02-16 -0.001991  0.007257  140.3750   99.212517  139.000000  \n",
       "2000-02-17 -0.003548 -0.004165  140.4375   98.699432  138.281204  \n",
       "2000-02-18 -0.011126 -0.026000  138.8750   96.580505  135.312500  \n",
       "2000-02-22 -0.018227 -0.008125  135.1875   96.335106  134.968704  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Indicators[30:].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hurst_exponent</th>\n",
       "      <th>sharpe_ratio</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open_pct</th>\n",
       "      <th>Close_pct</th>\n",
       "      <th>High_pct</th>\n",
       "      <th>Low_pct</th>\n",
       "      <th>Open</th>\n",
       "      <th>Price</th>\n",
       "      <th>Close</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-02-15</th>\n",
       "      <td>5.258879</td>\n",
       "      <td>0.027300</td>\n",
       "      <td>0.298928</td>\n",
       "      <td>-0.003800</td>\n",
       "      <td>0.011313</td>\n",
       "      <td>0.010284</td>\n",
       "      <td>-0.003729</td>\n",
       "      <td>139.2500</td>\n",
       "      <td>100.695770</td>\n",
       "      <td>141.078094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-16</th>\n",
       "      <td>5.287110</td>\n",
       "      <td>-0.005176</td>\n",
       "      <td>-0.201556</td>\n",
       "      <td>0.008079</td>\n",
       "      <td>-0.014730</td>\n",
       "      <td>-0.001991</td>\n",
       "      <td>0.007257</td>\n",
       "      <td>140.3750</td>\n",
       "      <td>99.212517</td>\n",
       "      <td>139.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-17</th>\n",
       "      <td>5.338493</td>\n",
       "      <td>0.016244</td>\n",
       "      <td>-0.142583</td>\n",
       "      <td>0.000445</td>\n",
       "      <td>-0.005171</td>\n",
       "      <td>-0.003548</td>\n",
       "      <td>-0.004165</td>\n",
       "      <td>140.4375</td>\n",
       "      <td>98.699432</td>\n",
       "      <td>138.281204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-18</th>\n",
       "      <td>5.341500</td>\n",
       "      <td>-0.174040</td>\n",
       "      <td>0.240632</td>\n",
       "      <td>-0.011126</td>\n",
       "      <td>-0.021469</td>\n",
       "      <td>-0.011126</td>\n",
       "      <td>-0.026000</td>\n",
       "      <td>138.8750</td>\n",
       "      <td>96.580505</td>\n",
       "      <td>135.312500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-22</th>\n",
       "      <td>5.318577</td>\n",
       "      <td>-0.189204</td>\n",
       "      <td>0.744612</td>\n",
       "      <td>-0.026553</td>\n",
       "      <td>-0.002541</td>\n",
       "      <td>-0.018227</td>\n",
       "      <td>-0.008125</td>\n",
       "      <td>135.1875</td>\n",
       "      <td>96.335106</td>\n",
       "      <td>134.968704</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            hurst_exponent  sharpe_ratio    Volume  Open_pct  Close_pct  \\\n",
       "Date                                                                      \n",
       "2000-02-15        5.258879      0.027300  0.298928 -0.003800   0.011313   \n",
       "2000-02-16        5.287110     -0.005176 -0.201556  0.008079  -0.014730   \n",
       "2000-02-17        5.338493      0.016244 -0.142583  0.000445  -0.005171   \n",
       "2000-02-18        5.341500     -0.174040  0.240632 -0.011126  -0.021469   \n",
       "2000-02-22        5.318577     -0.189204  0.744612 -0.026553  -0.002541   \n",
       "\n",
       "            High_pct   Low_pct      Open       Price       Close  \n",
       "Date                                                              \n",
       "2000-02-15  0.010284 -0.003729  139.2500  100.695770  141.078094  \n",
       "2000-02-16 -0.001991  0.007257  140.3750   99.212517  139.000000  \n",
       "2000-02-17 -0.003548 -0.004165  140.4375   98.699432  138.281204  \n",
       "2000-02-18 -0.011126 -0.026000  138.8750   96.580505  135.312500  \n",
       "2000-02-22 -0.018227 -0.008125  135.1875   96.335106  134.968704  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Indicators_useful_bn = Indicators[30:]\n",
    "Indicators_useful_bn.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# normalize the data\n",
    "Indicators_useful = Indicators_useful_bn.loc[:,[\"hurst_exponent\",\n",
    "                                                \"sharpe_ratio\",\n",
    "                                                        \"Volume\",\n",
    "                                                        'Open_pct',\n",
    "                                                        'Close_pct',\n",
    "                                                       'High_pct',\n",
    "                                                       'Low_pct']]\n",
    "\n",
    "data = [\"hurst_exponent\",\"sharpe_ratio\",\"Volume\",'Open_pct', 'Close_pct','High_pct','Low_pct']\n",
    "\n",
    "for i in data:\n",
    "    Indicators_useful[i] = (Indicators_useful[i]-Indicators_useful[i].mean())/Indicators_useful[i].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hurst_exponent</th>\n",
       "      <th>sharpe_ratio</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open_pct</th>\n",
       "      <th>Close_pct</th>\n",
       "      <th>High_pct</th>\n",
       "      <th>Low_pct</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-02-15</th>\n",
       "      <td>0.899907</td>\n",
       "      <td>-0.241543</td>\n",
       "      <td>0.618128</td>\n",
       "      <td>-0.334121</td>\n",
       "      <td>0.912283</td>\n",
       "      <td>1.050023</td>\n",
       "      <td>-0.339639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-16</th>\n",
       "      <td>1.039343</td>\n",
       "      <td>-0.425600</td>\n",
       "      <td>-0.678927</td>\n",
       "      <td>0.653755</td>\n",
       "      <td>-1.229176</td>\n",
       "      <td>-0.227080</td>\n",
       "      <td>0.606886</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-17</th>\n",
       "      <td>1.293125</td>\n",
       "      <td>-0.304204</td>\n",
       "      <td>-0.526091</td>\n",
       "      <td>0.018933</td>\n",
       "      <td>-0.443156</td>\n",
       "      <td>-0.389008</td>\n",
       "      <td>-0.377250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-18</th>\n",
       "      <td>1.307977</td>\n",
       "      <td>-1.382640</td>\n",
       "      <td>0.467047</td>\n",
       "      <td>-0.943325</td>\n",
       "      <td>-1.783277</td>\n",
       "      <td>-1.177447</td>\n",
       "      <td>-2.258574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-22</th>\n",
       "      <td>1.194756</td>\n",
       "      <td>-1.468581</td>\n",
       "      <td>1.773159</td>\n",
       "      <td>-2.226208</td>\n",
       "      <td>-0.226858</td>\n",
       "      <td>-1.916252</td>\n",
       "      <td>-0.718422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-23</th>\n",
       "      <td>1.057720</td>\n",
       "      <td>-1.132079</td>\n",
       "      <td>-0.834873</td>\n",
       "      <td>0.251033</td>\n",
       "      <td>0.953079</td>\n",
       "      <td>0.838540</td>\n",
       "      <td>0.606725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-24</th>\n",
       "      <td>0.847696</td>\n",
       "      <td>-1.253019</td>\n",
       "      <td>0.967399</td>\n",
       "      <td>0.633390</td>\n",
       "      <td>-1.673805</td>\n",
       "      <td>-0.351020</td>\n",
       "      <td>-0.919260</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-25</th>\n",
       "      <td>0.563988</td>\n",
       "      <td>-1.507360</td>\n",
       "      <td>-1.173092</td>\n",
       "      <td>-0.930684</td>\n",
       "      <td>-0.315606</td>\n",
       "      <td>-0.257172</td>\n",
       "      <td>0.001873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-28</th>\n",
       "      <td>0.264188</td>\n",
       "      <td>-1.381192</td>\n",
       "      <td>0.539900</td>\n",
       "      <td>-1.133042</td>\n",
       "      <td>1.707036</td>\n",
       "      <td>-0.043656</td>\n",
       "      <td>-0.281349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-29</th>\n",
       "      <td>-0.024380</td>\n",
       "      <td>-1.139850</td>\n",
       "      <td>-1.153788</td>\n",
       "      <td>1.657575</td>\n",
       "      <td>0.774908</td>\n",
       "      <td>0.550951</td>\n",
       "      <td>1.949521</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            hurst_exponent  sharpe_ratio    Volume  Open_pct  Close_pct  \\\n",
       "Date                                                                      \n",
       "2000-02-15        0.899907     -0.241543  0.618128 -0.334121   0.912283   \n",
       "2000-02-16        1.039343     -0.425600 -0.678927  0.653755  -1.229176   \n",
       "2000-02-17        1.293125     -0.304204 -0.526091  0.018933  -0.443156   \n",
       "2000-02-18        1.307977     -1.382640  0.467047 -0.943325  -1.783277   \n",
       "2000-02-22        1.194756     -1.468581  1.773159 -2.226208  -0.226858   \n",
       "2000-02-23        1.057720     -1.132079 -0.834873  0.251033   0.953079   \n",
       "2000-02-24        0.847696     -1.253019  0.967399  0.633390  -1.673805   \n",
       "2000-02-25        0.563988     -1.507360 -1.173092 -0.930684  -0.315606   \n",
       "2000-02-28        0.264188     -1.381192  0.539900 -1.133042   1.707036   \n",
       "2000-02-29       -0.024380     -1.139850 -1.153788  1.657575   0.774908   \n",
       "\n",
       "            High_pct   Low_pct  \n",
       "Date                            \n",
       "2000-02-15  1.050023 -0.339639  \n",
       "2000-02-16 -0.227080  0.606886  \n",
       "2000-02-17 -0.389008 -0.377250  \n",
       "2000-02-18 -1.177447 -2.258574  \n",
       "2000-02-22 -1.916252 -0.718422  \n",
       "2000-02-23  0.838540  0.606725  \n",
       "2000-02-24 -0.351020 -0.919260  \n",
       "2000-02-25 -0.257172  0.001873  \n",
       "2000-02-28 -0.043656 -0.281349  \n",
       "2000-02-29  0.550951  1.949521  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Indicators_useful.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## build a rolling indicator "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "Indicators_useful_bloc = Indicators_useful.ewm(20).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# generate pnl label\n",
    "\n",
    "There are two trading strategies:\n",
    "\n",
    "* mean reversion:\n",
    "\n",
    "* use 20 day's ewm with std 1.2:\n",
    "\n",
    "    * when price cross upper band from below, short;\n",
    "\n",
    "    * when price cross middle band from above, close\n",
    "\n",
    "    * when price cross lower band from above, long;\n",
    "\n",
    "    * when price cross middle band from below, close\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "* momentum:\n",
    "\n",
    "* use hist line in MACD indicator:\n",
    "\n",
    "    * when hist increase for 4 consecutive days  and  hist < 0, long\n",
    "\n",
    "    * when hist cross 0 from below, close\n",
    "\n",
    "    * when hist decreases for 4 consecutive days and hist > 0, short\n",
    "\n",
    "    * when hist cross 0 from above, close"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## mean reversion strategy\n",
    "start from a certain day (i), check the pnl of next 20 days, return the value of pnl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# compute the bollinger_band\n",
    "def compute_bollinger_band(series=Price, span=20, num_std=1.2):\n",
    "    bollinger_band_middle = Price.ewm(span=span).mean()\n",
    "    rolling_std = Price.ewm(com=9.5).std()\n",
    "    bollinger_band_upper = bollinger_band_middle+rolling_std*num_std\n",
    "    bollinger_band_lower = bollinger_band_middle-rolling_std*num_std\n",
    "    return bollinger_band_upper,bollinger_band_middle, bollinger_band_lower"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# take a date i and a window of fixed length (20)\n",
    "# return index of i+1 and i+20\n",
    "def get_window(date, series=Price, window_length = 20):\n",
    "    date = pd.to_datetime(date)\n",
    "    date_index = Price.index.get_loc(date)\n",
    "    return date_index+1, date_index+window_length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# EMA indicator for the whole series\n",
    "bb_upper, bb_middle, bb_lower = compute_bollinger_band(Price, span=20, num_std=1.2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def mean_reversion_strategy(date, series=Price, long_window=20, num_std=1.2,  window_length = 20):\n",
    "     \n",
    "            \n",
    "    # EMA indicator\n",
    "    #bb_upper, bb_middle, bb_lower = compute_bollinger_band(series, long_window, num_std)\n",
    "    \n",
    "    # periods\n",
    "    window_index_s, window_index_e = get_window(date = date, series=series, window_length = 20)\n",
    "    \n",
    "        \n",
    "    current_period = series[window_index_s:window_index_e+1]\n",
    "    current_upper = bb_upper[window_index_s:window_index_e+1]\n",
    "    current_middle = bb_middle[window_index_s:window_index_e+1]\n",
    "    current_lower = bb_lower[window_index_s:window_index_e+1]\n",
    "      \n",
    "    plt.plot(current_upper,'r-')  \n",
    "    plt.plot(current_middle,'g-')  \n",
    "    plt.plot(current_lower,'r-')  \n",
    "    plt.plot(current_period,'b.-')\n",
    "    plt.show()\n",
    "    \n",
    "    # notice the the indicators are designed such that there is no chance of them overlap\n",
    "    # price cross lower from above\n",
    "    long_indicator = np.all([current_period < current_lower, current_period.shift(1) > current_lower.shift(1)], axis=0)\n",
    "        \n",
    "    # price cross middle from below\n",
    "    close_long_indicator = np.all([current_period > current_middle, current_period.shift(1) < current_middle.shift(1)], axis=0)\n",
    "    \n",
    "    # price cross middle from above\n",
    "    close_short_indicator = np.all([current_period < current_middle, current_period.shift(1) > current_middle.shift(1)], axis=0)\n",
    "        \n",
    "    # price cross upper from below\n",
    "    short_indicator = np.all([current_period > current_upper, current_period.shift(1) < current_upper.shift(1)], axis=0)\n",
    "        \n",
    "\n",
    "    # make the strategy\n",
    "    # if eixst position, close it anyway at end of the period\n",
    "    position = 0\n",
    "    pnl = 0\n",
    "    pre_price = 0\n",
    "    count = 0\n",
    "    for j in range(window_length):\n",
    "                \n",
    "        # long indicator is activated\n",
    "        if long_indicator[j] == True and position == 0:\n",
    "            position = 1\n",
    "            pre_price = current_period[j]\n",
    "                \n",
    "        # close long indicator is activated\n",
    "        if close_long_indicator[j] == True and position == 1:\n",
    "            position = 0\n",
    "            pnl += current_period[j] - pre_price\n",
    "            pre_price = 0\n",
    "            count += 1\n",
    "            \n",
    "        # short indicator is activated\n",
    "        if short_indicator[j] == True and position == 0:\n",
    "            position =  -1\n",
    "            pre_price = current_period[j]\n",
    "            \n",
    "        # close short indicator is activated\n",
    "        if close_short_indicator[j] == True and position == -1:\n",
    "            position = 0\n",
    "            pnl += pre_price - current_period[j]\n",
    "            pre_price = 0\n",
    "            count += 1\n",
    "                \n",
    "    # close any existing position\n",
    "    if position != 0:\n",
    "        if position == 1:\n",
    "            pnl += current_period[window_length-1] - pre_price\n",
    "            count += 1\n",
    "        if position == -1:\n",
    "            pnl += pre_price - current_period[window_length-1]\n",
    "            count += 1\n",
    "                 \n",
    "    return pnl, count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x110440550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "(5.120757999999995, 1)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_reversion_strategy('2000-04-19', series=Price, long_window=20, num_std=1.2,  window_length = 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def mean_reversion_strategy_backtest(date, series=Price, Open=Open, long_window=20, num_std=1.2, window_length = 20):\n",
    "     \n",
    "            \n",
    "    # EMA indicator\n",
    "    #bb_upper, bb_middle, bb_lower = compute_bollinger_band(series, long_window, num_std)\n",
    "    \n",
    "    # periods\n",
    "    window_index_s, window_index_e = get_window(date = date, series=series, window_length = 20)\n",
    "    \n",
    "        \n",
    "    current_period = series[window_index_s:window_index_e+1]\n",
    "    current_upper = bb_upper[window_index_s:window_index_e+1]\n",
    "    current_middle = bb_middle[window_index_s:window_index_e+1]\n",
    "    current_lower = bb_lower[window_index_s:window_index_e+1]\n",
    "    current_open = Open[window_index_s:window_index_e+2]\n",
    "    '''\n",
    "    plt.plot(current_upper,'r-')  \n",
    "    plt.plot(current_middle,'g-')  \n",
    "    plt.plot(current_lower,'r-')  \n",
    "    plt.plot(current_period,'b.-')\n",
    "    plt.show()\n",
    "    '''\n",
    "    # notice the the indicators are designed such that there is no chance of them overlap\n",
    "    # price cross lower from above\n",
    "    long_indicator = np.all([current_period < current_lower, current_period.shift(1) > current_lower.shift(1)], axis=0)\n",
    "        \n",
    "    # price cross middle from below\n",
    "    close_long_indicator = np.all([current_period > current_middle, current_period.shift(1) < current_middle.shift(1)], axis=0)\n",
    "    \n",
    "    # price cross middle from above\n",
    "    close_short_indicator = np.all([current_period < current_middle, current_period.shift(1) > current_middle.shift(1)], axis=0)\n",
    "        \n",
    "    # price cross upper from below\n",
    "    short_indicator = np.all([current_period > current_upper, current_period.shift(1) < current_upper.shift(1)], axis=0)\n",
    "        \n",
    "\n",
    "    # make the strategy\n",
    "    # if eixst position, close it anyway at end of the period\n",
    "    position = 0\n",
    "    pnl = 0\n",
    "    pre_price = 0\n",
    "    count = 0\n",
    "    for j in range(window_length):\n",
    "                \n",
    "        # long indicator is activated\n",
    "        if long_indicator[j] == True and position == 0:\n",
    "            position = 1\n",
    "            \n",
    "            #pre_price = current_period[j]\n",
    "            pre_price = current_open[j+1]  \n",
    "            \n",
    "        # close long indicator is activated\n",
    "        if close_long_indicator[j] == True and position == 1:\n",
    "            position = 0\n",
    "            \n",
    "            #pnl += current_period[j] - pre_price\n",
    "            pnl += current_open[j+1] - pre_price\n",
    "            \n",
    "            pre_price = 0\n",
    "            count += 1\n",
    "            \n",
    "        # short indicator is activated\n",
    "        if short_indicator[j] == True and position == 0:\n",
    "            position =  -1\n",
    "            #pre_price = current_period[j]\n",
    "            pre_price = current_open[j+1]  \n",
    "            \n",
    "            \n",
    "        # close short indicator is activated\n",
    "        if close_short_indicator[j] == True and position == -1:\n",
    "            position = 0\n",
    "            \n",
    "            pnl += pre_price - current_open[j+1]\n",
    "            #pnl += pre_price - current_period[j]\n",
    "            \n",
    "            pre_price = 0\n",
    "            count += 1\n",
    "                \n",
    "    # close any existing position\n",
    "    if position != 0:\n",
    "        if position == 1:\n",
    "            #pnl += current_period[window_length-1] - pre_price\n",
    "            pnl += current_open[window_length] - pre_price\n",
    "            count += 1\n",
    "        if position == -1:\n",
    "            #pnl += pre_price - current_period[window_length-1]\n",
    "            pnl +=  pre_price - current_open[window_length]\n",
    "            count += 1\n",
    "                 \n",
    "    return pnl, count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.8592989999999929, 1)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mean_reversion_strategy_backtest('2000-06-22', series=Price, Open=Open, long_window=20, num_std=1.2, window_length = 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## momentum strategy\n",
    "start from a certain day (i), check the pnl of next 20 days, return the value of pnl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# generate MACD_hist\n",
    "ema_26 = Price.ewm(26).mean()\n",
    "ema_12 = Price.ewm(12).mean()\n",
    "MACD_line = ema_12 - ema_26\n",
    "Sigal_line = MACD_line.ewm(9).mean()\n",
    "MACD_hist = MACD_line - Sigal_line"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def momentum_strategy_backtest(date, series=Price, Open=Open, long_window=20,  window_length = 20):\n",
    "    # EMA indicator\n",
    "    #bb_upper, bb_middle, bb_lower = compute_bollinger_band(series, long_window, num_std)\n",
    "    \n",
    "    # periods\n",
    "    window_index_s, window_index_e = get_window(date = date, series=series, window_length = 20)\n",
    "    \n",
    "        \n",
    "    current_period = series[window_index_s:window_index_e+1]\n",
    "    current_MACD_hist = MACD_hist[window_index_s:window_index_e+1]\n",
    "    current_open = Open[window_index_s:window_index_e+2]\n",
    "\n",
    "    '''\n",
    "    _, ax1 = plt.subplots(figsize=(14,8))\n",
    "    ax1.plot(current_MACD_hist, c='r', label='hist')\n",
    "    ax1.legend(loc=2)\n",
    "    ax1.grid(True)\n",
    "    ax2 = ax1.twinx()\n",
    "    ax2.plot(current_period, c='black', label='price')\n",
    "    ax2.legend(loc=1)\n",
    "    plt.show()\n",
    "    '''\n",
    "    # notice the the indicators are designed such that there is no chance of them overlap\n",
    "    \n",
    "    # hist increases 3 consecutive days\n",
    "    long_indicator = np.all([current_MACD_hist.shift(-1) > current_MACD_hist, current_MACD_hist.shift(-2) > current_MACD_hist.shift(-1),current_MACD_hist.shift(-3) > current_MACD_hist.shift(-2), current_MACD_hist < 0], axis=0)\n",
    "  \n",
    "    # hist cross 0 from below\n",
    "    close_long_indicator = np.all([current_MACD_hist.shift(1) < 0 , current_MACD_hist > 0], axis=0)\n",
    "\n",
    "    # hist decreases 3 consecutive days\n",
    "    short_indicator = np.all([current_MACD_hist.shift(-1) < current_MACD_hist, current_MACD_hist.shift(-2) < current_MACD_hist.shift(-1),current_MACD_hist.shift(-3) < current_MACD_hist.shift(-2), current_MACD_hist < 0], axis=0)\n",
    "    \n",
    "     # hist cross 0 from above\n",
    "    close_short_indicator = np.all([current_MACD_hist.shift(1) > 0 , current_MACD_hist < 0], axis=0)\n",
    "        \n",
    "\n",
    "    # make the strategy\n",
    "    # if eixst position, close it anyway at end of the period\n",
    "    position = 0\n",
    "    pnl = 0\n",
    "    pre_price = 0\n",
    "    count = 0\n",
    "    for j in range(window_length):\n",
    "                \n",
    "        # long indicator is activated\n",
    "        if long_indicator[j] == True and position == 0:\n",
    "            position = 1\n",
    "            \n",
    "            #pre_price = current_period[j]\n",
    "            pre_price = current_open[j+1]  \n",
    "      \n",
    "        # close long indicator is activated\n",
    "        if close_long_indicator[j] == True and position == 1:\n",
    "            position = 0\n",
    "            \n",
    "            #pnl += current_period[j] - pre_price\n",
    "            pnl += current_open[j+1] - pre_price\n",
    "           \n",
    "            pre_price = 0\n",
    "            count += 1\n",
    "\n",
    "        # short indicator is activated\n",
    "        if short_indicator[j] == True and position == 0:\n",
    "            position =  -1\n",
    "            #pre_price = current_period[j]\n",
    "            pre_price = current_open[j+1]  \n",
    "            \n",
    "            \n",
    "        # close short indicator is activated\n",
    "        if close_short_indicator[j] == True and position == -1:\n",
    "            position = 0\n",
    "            \n",
    "            pnl += pre_price - current_open[j+1]\n",
    "            #pnl += pre_price - current_period[j]\n",
    "            \n",
    "            pre_price = 0\n",
    "            count += 1\n",
    "\n",
    "    # close any existing position\n",
    "    if position != 0:\n",
    "        if position == 1:\n",
    "            #pnl += current_period[window_length-1] - pre_price\n",
    "            pnl += current_open[window_length] - pre_price\n",
    "            count += 1\n",
    "\n",
    "        if position == -1:\n",
    "            #pnl += pre_price - current_period[window_length-1]\n",
    "            pnl +=  pre_price - current_open[window_length]\n",
    "            count += 1\n",
    "   \n",
    "                 \n",
    "    return pnl, count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.8125, 1)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "momentum_strategy_backtest(date='2000-02-22', series=Price, Open=Open, long_window=20,  window_length = 20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## combine two strategies according to the mixed weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "weight_mean_reversion = np.arange(0, 1.01, 0.1)\n",
    "weight_momentum = 1- np.arange(0, 1.01, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "date = Indicators_useful.index.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "length = int (len(date) * .95)\n",
    "label_arr = np.zeros(length)\n",
    "for i in range(length):\n",
    "    pnl = weight_momentum*momentum_strategy_backtest(date[i])[0] + weight_mean_reversion*mean_reversion_strategy_backtest(date[i])[0]\n",
    "    label_arr[i] = np.argmax(pnl)\n",
    "label = pd.DataFrame({'label':label_arr, 'Date':date[:length]}, columns=['label','Date']).set_index('Date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x112b34c18>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 10 is mean reversion\n",
    "# 0 is momentum\n",
    "label.plot(kind='hist')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## combine two dataframes into one that we can use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hurst_exponent</th>\n",
       "      <th>sharpe_ratio</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open_pct</th>\n",
       "      <th>Close_pct</th>\n",
       "      <th>High_pct</th>\n",
       "      <th>Low_pct</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-02-02</th>\n",
       "      <td>0.667610</td>\n",
       "      <td>0.674105</td>\n",
       "      <td>-0.040633</td>\n",
       "      <td>0.023745</td>\n",
       "      <td>0.025110</td>\n",
       "      <td>0.029049</td>\n",
       "      <td>0.024259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-03</th>\n",
       "      <td>0.673667</td>\n",
       "      <td>0.659600</td>\n",
       "      <td>-0.026833</td>\n",
       "      <td>0.042630</td>\n",
       "      <td>0.050051</td>\n",
       "      <td>0.058211</td>\n",
       "      <td>0.051894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-06</th>\n",
       "      <td>0.676936</td>\n",
       "      <td>0.645637</td>\n",
       "      <td>-0.067896</td>\n",
       "      <td>0.040603</td>\n",
       "      <td>0.039813</td>\n",
       "      <td>0.049743</td>\n",
       "      <td>0.049984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-07</th>\n",
       "      <td>0.682026</td>\n",
       "      <td>0.629111</td>\n",
       "      <td>-0.071818</td>\n",
       "      <td>0.046632</td>\n",
       "      <td>0.037235</td>\n",
       "      <td>0.053555</td>\n",
       "      <td>0.049960</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-08</th>\n",
       "      <td>0.694372</td>\n",
       "      <td>0.610798</td>\n",
       "      <td>-0.089413</td>\n",
       "      <td>0.035954</td>\n",
       "      <td>0.039739</td>\n",
       "      <td>0.044232</td>\n",
       "      <td>0.039350</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            hurst_exponent  sharpe_ratio    Volume  Open_pct  Close_pct  \\\n",
       "Date                                                                      \n",
       "2017-02-02        0.667610      0.674105 -0.040633  0.023745   0.025110   \n",
       "2017-02-03        0.673667      0.659600 -0.026833  0.042630   0.050051   \n",
       "2017-02-06        0.676936      0.645637 -0.067896  0.040603   0.039813   \n",
       "2017-02-07        0.682026      0.629111 -0.071818  0.046632   0.037235   \n",
       "2017-02-08        0.694372      0.610798 -0.089413  0.035954   0.039739   \n",
       "\n",
       "            High_pct   Low_pct  \n",
       "Date                            \n",
       "2017-02-02  0.029049  0.024259  \n",
       "2017-02-03  0.058211  0.051894  \n",
       "2017-02-06  0.049743  0.049984  \n",
       "2017-02-07  0.053555  0.049960  \n",
       "2017-02-08  0.044232  0.039350  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Indicators_useful_bloc[:length].tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "training_df = pd.concat([Indicators_useful_bloc[:length], label], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Building\n",
    "We will try random forest and gradient boosting model for our task.\n",
    "\n",
    "Notice that here we have either 10 or 0. Therefore we only use 1 and 0 as label.\n",
    "\n",
    "The training data will be split by 4:1, 4 for training and 1 for validation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using a fixed weight\n",
    "The weight is the exponential decaying weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hurst_exponent</th>\n",
       "      <th>sharpe_ratio</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open_pct</th>\n",
       "      <th>Close_pct</th>\n",
       "      <th>High_pct</th>\n",
       "      <th>Low_pct</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-02-02</th>\n",
       "      <td>0.667610</td>\n",
       "      <td>0.674105</td>\n",
       "      <td>-0.040633</td>\n",
       "      <td>0.023745</td>\n",
       "      <td>0.025110</td>\n",
       "      <td>0.029049</td>\n",
       "      <td>0.024259</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-03</th>\n",
       "      <td>0.673667</td>\n",
       "      <td>0.659600</td>\n",
       "      <td>-0.026833</td>\n",
       "      <td>0.042630</td>\n",
       "      <td>0.050051</td>\n",
       "      <td>0.058211</td>\n",
       "      <td>0.051894</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-06</th>\n",
       "      <td>0.676936</td>\n",
       "      <td>0.645637</td>\n",
       "      <td>-0.067896</td>\n",
       "      <td>0.040603</td>\n",
       "      <td>0.039813</td>\n",
       "      <td>0.049743</td>\n",
       "      <td>0.049984</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-07</th>\n",
       "      <td>0.682026</td>\n",
       "      <td>0.629111</td>\n",
       "      <td>-0.071818</td>\n",
       "      <td>0.046632</td>\n",
       "      <td>0.037235</td>\n",
       "      <td>0.053555</td>\n",
       "      <td>0.049960</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-08</th>\n",
       "      <td>0.694372</td>\n",
       "      <td>0.610798</td>\n",
       "      <td>-0.089413</td>\n",
       "      <td>0.035954</td>\n",
       "      <td>0.039739</td>\n",
       "      <td>0.044232</td>\n",
       "      <td>0.039350</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            hurst_exponent  sharpe_ratio    Volume  Open_pct  Close_pct  \\\n",
       "Date                                                                      \n",
       "2017-02-02        0.667610      0.674105 -0.040633  0.023745   0.025110   \n",
       "2017-02-03        0.673667      0.659600 -0.026833  0.042630   0.050051   \n",
       "2017-02-06        0.676936      0.645637 -0.067896  0.040603   0.039813   \n",
       "2017-02-07        0.682026      0.629111 -0.071818  0.046632   0.037235   \n",
       "2017-02-08        0.694372      0.610798 -0.089413  0.035954   0.039739   \n",
       "\n",
       "            High_pct   Low_pct  label  \n",
       "Date                                   \n",
       "2017-02-02  0.029049  0.024259    0.0  \n",
       "2017-02-03  0.058211  0.051894    0.0  \n",
       "2017-02-06  0.049743  0.049984    0.0  \n",
       "2017-02-07  0.053555  0.049960    0.0  \n",
       "2017-02-08  0.044232  0.039350   10.0  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "total_length = len(training_df)\n",
    "train_length = int(.8 * total_length)\n",
    "test_length = total_length - train_length\n",
    "train_set = training_df[:train_length]\n",
    "test_set = training_df[train_length+1:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# build the training and test data\n",
    "n_row, n_col = train_set.shape\n",
    "train_x = train_set.iloc[:,0:n_col-1]\n",
    "train_y = train_set.iloc[:,n_col-1]\n",
    "train_y_classification = train_y.copy()\n",
    "train_y_classification[train_y_classification>5] = 1\n",
    "train_y_classification = train_y_classification.astype('int32')\n",
    "test_x = test_set.iloc[:,0:n_col-1]\n",
    "test_y =  test_set.iloc[:,n_col-1]\n",
    "test_y_classification = test_y.copy()\n",
    "test_y_classification[test_y_classification>5] = 1\n",
    "test_y_classification = test_y_classification.astype('int32')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn import metrics\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def classification_process(estimator, train_x, train_y_classification, test_x, test_y_classification):\n",
    "    estimator.fit(train_x, train_y_classification)\n",
    "    test_y_predict_classification = estimator.predict(test_x)\n",
    "    print ('{} accuracy = {:.2f}'.format(estimator.__class__.__name__, \n",
    "                                         metrics.accuracy_score(test_y_classification, test_y_predict_classification)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GradientBoostingClassifier accuracy = 0.57\n"
     ]
    }
   ],
   "source": [
    "estimator = GradientBoostingClassifier(n_estimators=500)\n",
    "classification_process(estimator, train_x, train_y_classification, test_x, test_y_classification)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### make inference and generate PNL for test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "importance for sharpe ratio is 0.189964\n",
      "importance for volume is 0.222799\n",
      "importance for hurst_exponent is 0.156096\n",
      "importance for open is 0.097335\n",
      "importance for close is 0.146071\n",
      "importance for high is 0.085807\n",
      "importance for low is 0.101930\n"
     ]
    }
   ],
   "source": [
    "prediction = estimator.predict(test_x)\n",
    "importance = estimator.feature_importances_\n",
    "features = ('sharpe ratio','volume','hurst_exponent','open','close','high','low')\n",
    "for i in zip(importance, features):\n",
    "    print ('importance for {0} is {1:3f}'.format(i[1], i[0]))\n",
    "date = test_x.index.values\n",
    "prediction_df = pd.DataFrame({'prediction':prediction, 'date':date},columns = ['prediction','date']).set_index('date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prediction</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-01-11</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-12</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-13</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-17</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-20</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-23</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-25</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-26</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-27</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-30</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-31</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-01</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-02</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-03</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-06</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-07</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-08</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            prediction\n",
       "date                  \n",
       "2017-01-11           1\n",
       "2017-01-12           1\n",
       "2017-01-13           1\n",
       "2017-01-17           1\n",
       "2017-01-18           1\n",
       "2017-01-19           1\n",
       "2017-01-20           1\n",
       "2017-01-23           1\n",
       "2017-01-24           1\n",
       "2017-01-25           0\n",
       "2017-01-26           0\n",
       "2017-01-27           1\n",
       "2017-01-30           1\n",
       "2017-01-31           1\n",
       "2017-02-01           1\n",
       "2017-02-02           1\n",
       "2017-02-03           1\n",
       "2017-02-06           0\n",
       "2017-02-07           0\n",
       "2017-02-08           1"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction_df.tail(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total pnl for 854 days is 99.980012\n",
      "benchmark pnl is 60.050003\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a1a18e780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# generate pnl\n",
    "# use majority vote\n",
    "# 0 momentum, 1 mean reversion\n",
    "# choose 2010-03-10 because we have labels for it 10 days before\n",
    "start_date = prediction_df.index.values[11]\n",
    "end_date = prediction_df.index.values[len(prediction_df)-1]\n",
    "#start_date = pd.to_datetime('2010-03-10')\n",
    "index = prediction_df.index.get_loc(start_date)\n",
    "total_pnl = 0\n",
    "pnl_record = []\n",
    "date_record = []\n",
    "\n",
    "period = []\n",
    "for i in np.arange(index, len(test_x), 20):\n",
    "    \n",
    "    low_bound = i - 10\n",
    "    information = prediction_df[low_bound:i]\n",
    "    date = prediction_df.index.values[i]\n",
    "    \n",
    "    if information.sum().values[0]<5:\n",
    "        pnl = momentum_strategy_backtest(date)[0]\n",
    "        period.append(('momentum',date))\n",
    "    else:\n",
    "        pnl = mean_reversion_strategy_backtest(date)[0]\n",
    "        period.append(('mean reversion',date))\n",
    "        \n",
    "    total_pnl += pnl\n",
    "   \n",
    "    date_record.append(test_x.index.values[i])    \n",
    "    pnl_record.append(pnl) \n",
    "    \n",
    "date_record = np.array(date_record)\n",
    "pnl_record = np.array(pnl_record).cumsum()\n",
    "\n",
    "s_index = Indicators_useful.index.get_loc(start_date)\n",
    "e_index = Indicators_useful.index.get_loc(end_date)\n",
    "bench_mark = Indicators_useful_bn[s_index:e_index]\n",
    "bench_mark\n",
    "bench_mark_pnl = bench_mark['Close'].diff().cumsum()\n",
    "\n",
    "pnl_df = pd.DataFrame({'cumulative_pnl':pnl_record, 'date':date_record}, columns=['cumulative_pnl','date']).set_index('date')\n",
    "end_date = pd.to_datetime(prediction_df.index.values[len(test_x)-1])\n",
    "\n",
    "\n",
    "print ('total pnl for {0} days is {1:3f}'.format(len(test_x),total_pnl))  \n",
    "print ('benchmark pnl is {0:3f}'.format(bench_mark['Close'][len(bench_mark)-1]-bench_mark['Close'][0]))\n",
    "pnl_df.plot()\n",
    "plt.plot(bench_mark_pnl, label='benchmark_pnl')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using LSTM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "from subprocess import check_output\n",
    "from keras.layers.core import Dense, Activation, Dropout\n",
    "from keras.layers.recurrent import LSTM\n",
    "from keras.models import Sequential\n",
    "import time #helper libraries\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "import matplotlib.pyplot as plt\n",
    "from numpy import newaxis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>hurst_exponent</th>\n",
       "      <th>sharpe_ratio</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open_pct</th>\n",
       "      <th>Close_pct</th>\n",
       "      <th>High_pct</th>\n",
       "      <th>Low_pct</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2000-02-15</th>\n",
       "      <td>0.899907</td>\n",
       "      <td>-0.241543</td>\n",
       "      <td>0.618128</td>\n",
       "      <td>-0.334121</td>\n",
       "      <td>0.912283</td>\n",
       "      <td>1.050023</td>\n",
       "      <td>-0.339639</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-16</th>\n",
       "      <td>0.971325</td>\n",
       "      <td>-0.335816</td>\n",
       "      <td>-0.046217</td>\n",
       "      <td>0.171864</td>\n",
       "      <td>-0.184562</td>\n",
       "      <td>0.395897</td>\n",
       "      <td>0.145166</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-17</th>\n",
       "      <td>1.083866</td>\n",
       "      <td>-0.324761</td>\n",
       "      <td>-0.214040</td>\n",
       "      <td>0.118381</td>\n",
       "      <td>-0.274998</td>\n",
       "      <td>0.121398</td>\n",
       "      <td>-0.037535</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-18</th>\n",
       "      <td>1.144058</td>\n",
       "      <td>-0.608889</td>\n",
       "      <td>-0.031112</td>\n",
       "      <td>-0.166775</td>\n",
       "      <td>-0.680096</td>\n",
       "      <td>-0.227449</td>\n",
       "      <td>-0.634067</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2000-02-22</th>\n",
       "      <td>1.155211</td>\n",
       "      <td>-0.798000</td>\n",
       "      <td>0.365784</td>\n",
       "      <td>-0.619801</td>\n",
       "      <td>-0.580394</td>\n",
       "      <td>-0.598945</td>\n",
       "      <td>-0.652623</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            hurst_exponent  sharpe_ratio    Volume  Open_pct  Close_pct  \\\n",
       "Date                                                                      \n",
       "2000-02-15        0.899907     -0.241543  0.618128 -0.334121   0.912283   \n",
       "2000-02-16        0.971325     -0.335816 -0.046217  0.171864  -0.184562   \n",
       "2000-02-17        1.083866     -0.324761 -0.214040  0.118381  -0.274998   \n",
       "2000-02-18        1.144058     -0.608889 -0.031112 -0.166775  -0.680096   \n",
       "2000-02-22        1.155211     -0.798000  0.365784 -0.619801  -0.580394   \n",
       "\n",
       "            High_pct   Low_pct  label  \n",
       "Date                                   \n",
       "2000-02-15  1.050023 -0.339639   10.0  \n",
       "2000-02-16  0.395897  0.145166   10.0  \n",
       "2000-02-17  0.121398 -0.037535   10.0  \n",
       "2000-02-18 -0.227449 -0.634067   10.0  \n",
       "2000-02-22 -0.598945 -0.652623    0.0  "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "length of data:\n",
      "(4273, 8)\n"
     ]
    }
   ],
   "source": [
    "print ('length of data:')\n",
    "print ((training_df.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "look_back = 5\n",
    "\n",
    "# reshape the data\n",
    "# training \n",
    "def generate_data(training_df = training_df, look_back = look_back):\n",
    "    dataX = []\n",
    "    dataY = []\n",
    "    for i in np.arange(look_back, len(training_df)):\n",
    "        x = training_df.iloc[i-look_back:i,:7].values\n",
    "        y = training_df.iloc[i-1,7]\n",
    "        dataX.append(x)\n",
    "        dataY.append(1 if y > 5 else 0)\n",
    "    return np.array(dataX), np.array(dataY)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4273\n",
      "3418\n",
      "855\n",
      "855\n"
     ]
    }
   ],
   "source": [
    "print (len(training_df))\n",
    "train_size = int(len(training_df) * .8) \n",
    "print (train_size)\n",
    "test_size = len(training_df) - train_size\n",
    "print (test_size)\n",
    "testX_date = training_df.iloc[train_size:].index.values\n",
    "print (len(testX_date))\n",
    "X, Y = generate_data()\n",
    "trainX, trainY = X[:train_size-look_back], Y[:train_size-look_back]\n",
    "testX, testY = X[train_size-look_back:], Y[train_size-look_back:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4268"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6824 - acc: 0.5637\n",
      "Epoch 2/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6761 - acc: 0.5807\n",
      "Epoch 3/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6765 - acc: 0.5831\n",
      "Epoch 4/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6745 - acc: 0.5825\n",
      "Epoch 5/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6725 - acc: 0.5872\n",
      "Epoch 6/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6713 - acc: 0.5924\n",
      "Epoch 7/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6698 - acc: 0.5974\n",
      "Epoch 8/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6689 - acc: 0.6021\n",
      "Epoch 9/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6662 - acc: 0.6015\n",
      "Epoch 10/10\n",
      "3413/3413 [==============================] - 4s 1ms/step - loss: 0.6658 - acc: 0.6030\n",
      "855/855 [==============================] - 0s 249us/step\n"
     ]
    }
   ],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(LSTM(20,input_shape=(look_back, 7)))\n",
    "model.add(Dropout(0.5))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer='rmsprop',\n",
    "              metrics=['accuracy'])\n",
    "\n",
    "model.fit(trainX, trainY, batch_size=16, epochs=10)\n",
    "score = model.evaluate(testX, testY, batch_size=16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "testPredict = model.predict(testX)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "testPredict[testPredict<.5]=0\n",
    "testPredict[testPredict>.5]=1\n",
    "testPredict = np.ravel(testPredict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction_df =pd.DataFrame({'prediction':testPredict, 'date':testX_date},columns = ['prediction','date']).set_index('date')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total pnl for 854 days is 139.240004\n",
      "benchmark pnl is 55.889999\n"
     ]
    },
    {
     "data": {
      "image/png": "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\ncHUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1a235e45f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# generate pnl\n",
    "# use majority vote\n",
    "# 0 momentum, 1 mean reversion\n",
    "# choose 2010-03-10 because we have labels for it 10 days before\n",
    "start_date = prediction_df.index.values[0]\n",
    "end_date = prediction_df.index.values[len(prediction_df)-1]\n",
    "\n",
    "index = prediction_df.index.get_loc(start_date)\n",
    "total_pnl = 0\n",
    "pnl_record = []\n",
    "date_record = []\n",
    "\n",
    "period = []\n",
    "for i in np.arange(index, len(test_x), 7):\n",
    "    \n",
    "    low_bound = i - 7\n",
    "    information = prediction_df[low_bound:i]\n",
    "    date = prediction_df.index.values[i]\n",
    "    \n",
    "    if information.sum().values[0]<3:\n",
    "        pnl = momentum_strategy_backtest(date, long_window=10)[0]\n",
    "        period.append(('momentum',date))\n",
    "    else:\n",
    "        pnl = mean_reversion_strategy_backtest(date, long_window=10)[0]\n",
    "        period.append(('mean reversion',date))\n",
    "        \n",
    "    total_pnl += pnl\n",
    "   \n",
    "    date_record.append(test_x.index.values[i])    \n",
    "    pnl_record.append(pnl) \n",
    "    \n",
    "date_record = np.array(date_record)\n",
    "pnl_record = np.array(pnl_record).cumsum()\n",
    "\n",
    "s_index = Indicators_useful.index.get_loc(start_date)\n",
    "e_index = Indicators_useful.index.get_loc(end_date)\n",
    "bench_mark = Indicators_useful_bn[s_index:e_index]\n",
    "bench_mark\n",
    "bench_mark_pnl = bench_mark['Close'].diff().cumsum()\n",
    "\n",
    "pnl_df = pd.DataFrame({'cumulative_pnl':pnl_record, 'date':date_record}, columns=['cumulative_pnl','date']).set_index('date')\n",
    "end_date = pd.to_datetime(prediction_df.index.values[len(test_x)-1])\n",
    "\n",
    "\n",
    "print ('total pnl for {0} days is {1:3f}'.format(len(test_x),total_pnl))  \n",
    "print ('benchmark pnl is {0:3f}'.format(bench_mark['Close'][len(bench_mark)-1]-bench_mark['Close'][0]))\n",
    "pnl_df.plot()\n",
    "plt.plot(bench_mark_pnl, label='benchmark_pnl')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
